<?php 
/**
 * Implements _nc_eight_theme_logo_svg_upload_validate function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function _nc_eight_theme_logo_svg_upload_validate(&$element, &$form_state) {
  $validators = array('file_validate_extensions' => array('svg'));
  // Check for a new uploaded logo.
  $file = file_save_upload('logo_svg_upload', $validators);
  if (isset($file)) {
    // File upload was attempted.
    if ($file) {
      // Put the temporary file in form_values so we can save it on submit.
      $form_state['values']['logo_svg_upload'] = $file;
      $filename = file_unmanaged_copy($file->uri);
      $form_state['values']['logo_svg_path'] = $filename;
    }
    else {
      // File upload failed.
      form_set_error('logo_svg_upload', t('The svg logo could not be uploaded.'));
    }
  }
}

/**
 * Implements _nc_eight_theme_logo_svg_path_validate function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function _nc_eight_theme_logo_svg_path_validate(&$element, &$form_state) {
  if (!empty($form_state['values']['logo_svg_path'])) {
    $path = _system_theme_settings_validate_path($form_state['values']['logo_svg_path']);
    if (!$path) {
      form_set_error('logo_svg_path', t('The logo svg path is invalid.'));
    }
    else {
      $ext = substr($path, -4);
      if ($ext != '.svg') {
        form_set_error('logo_svg_path', t('The logo svg path must be a path to a svg file.'));
      }
    }
  }
}

/**
 * Implements _nc_eight_theme_logo_footer_upload_validate function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function _nc_eight_theme_logo_footer_upload_validate(&$element, &$form_state) {
  $validators = array('file_validate_extensions' => array('jpeg jpg gif png svg'));
  // Check for a new uploaded logo.
  $file = file_save_upload('logo_footer_upload', $validators);
  if (isset($file)) {
    // File upload was attempted.
    if ($file) {
      // Put the temporary file in form_values so we can save it on submit.
      $form_state['values']['logo_footer_upload'] = $file;
      $filename = file_unmanaged_copy($file->uri);
      $form_state['values']['logo_footer_path'] = $filename;
    }
    else {
      // File upload failed.
      form_set_error('logo_footer_upload', t('The footer logo could not be uploaded.'));
    }
  }
}

/**
 * Implements _nc_eight_theme_logo_footer_path_validate function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function _nc_eight_theme_logo_footer_path_validate(&$element, &$form_state) {
  if (!empty($form_state['values']['logo_footer_path'])) {
    $path = _system_theme_settings_validate_path($form_state['values']['logo_footer_path']);
    if (!$path) {
      form_set_error('logo_footer_path', t('The logo footer path is invalid.'));
    }
    else {
      $ext = explode('.', $path);
      $ext = end($ext);
      if (!in_array($ext, array('svg', 'gif', 'png', 'jpg', 'jpeg'))) {
        form_set_error('logo_footer_path', t('The logo footer path must be a path to a valid image file'));
      }
    }
  }
}

/**
 * Implements _nc_eight_theme_favicon_upload_validate function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function _nc_eight_theme_favicon_upload_validate(&$element, &$form_state) {
  $validators = array('file_validate_extensions' => array('png'));
  // Check for a new uploaded favicon.
  $file = file_save_upload('favicon_upload', $validators);

  if (isset($file)) {
    // File upload was attempted.
    if ($file) {
      // Put the temporary file in form_values so we can save it on submit.
      $form_state['values']['favicon_upload'] = $file;
      $filename = file_unmanaged_copy($file->uri);
      $form_state['values']['favicon_path'] = $filename;

      $favicon_variants = nc_favicon_style_list();
      foreach($favicon_variants as $variant => $favicon_type) {
        $new_favicon_uri = str_replace('.png', '-' . $variant . '.png', $filename);
        if (!file_exists($new_favicon_uri))
        $styled_url = image_style_create_derivative(image_style_load($variant), $filename, $new_favicon_uri);
        $styled_url_final = file_create_url(str_replace('.png', '-' . $variant . '.png', $filename));

      }
    }
    else {
      // File upload failed.
      form_set_error('favicon_upload', t('The favicon could not be uploaded.'));
    }
  }
}

/**
 * Implements _nc_eight_theme_favicon_path_validate function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function _nc_eight_theme_favicon_path_validate(&$element, &$form_state) {
  if (!empty($form_state['values']['favicon_path'])) {
    $path = _system_theme_settings_validate_path($form_state['values']['favicon_path']);
    if (!$path) {
      form_set_error('favicon_path', t('The favicon path is invalid.'));
    }
    else {
      $ext = explode('.', $path);
      $ext = end($ext);
      if (!in_array($ext, array('png'))) {
        form_set_error('favicon_path', t('The path path must be a path to a valid .png image file'));
      }
    }
  }
}
/**
 * Implements nc_eight_theme_menu_alter function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_menu_alter(&$items) {
  unset($items['user/password']);
}

/**
 * Implements nc_eight_theme_css_alter function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_css_alter(&$css) {

  $variables['color_profile'] = theme_get_setting('color_profile', 'nc_eight_theme');
  if (isset($variables['color_profile']) && $variables['color_profile'] !== 'default'):
    $theme_path = drupal_get_path('theme', 'nc_eight_theme');
    // Remove defaults.css file.
    unset($css[$theme_path . '/css/style.css']);
  endif;

  // This was added as part of ABT#596.
  // The system.messages.css prevents warning alerts from displaying
  // the proper (light) font color, due to a conflict on the class
  // "warning". Instead of updating the class, MarkR has recommended
  // disabling the system.messages.css.
  // Since the system.messages.css may be important for backend
  // styling on Drupal core messages, we'll only remove the file
  // if the user is not logged in.
  if (user_is_anonymous()):
    $key = drupal_get_path('module', 'system') . '/system.messages.css';
    unset($css[$key]);
  endif;
}

/**
 * Implements nc_eight_theme_preprocess_html function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_preprocess_html(&$variables) {
  // $variables['styles'] = drupal_get_css();
  $variables['color_profile'] = theme_get_setting('color_profile', 'nc_eight_theme');
  if (isset($variables['color_profile']) && $variables['color_profile'] !== 'default'):
    $theme_path = drupal_get_path('theme', 'nc_eight_theme');

    switch ($variables['color_profile']) {
      case 'governor':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-governor.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
// @Deprecated:          drupal_add_css($theme_path . '/css/overrides-governor.css', array(
            'group' => CSS_THEME,
            'weight' => 2,
            'type' => 'file',
          )
        );
        break;

      case 'ncdcr':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-ncdcr.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
        break;

      case 'ncdenr':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-ncdenr.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
        break;

      case 'ncdhhs':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-ncdhhs.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
        break;

      case 'ncdoa':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-ncdoa.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
        break;

      case 'ncdoc':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-ncdoc.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
        break;

      case 'ncdor':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-ncdor.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
        break;

      case 'ncdps':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-ncdps.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
        break;

      case 'ncgov':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-ncgov.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
        break;

      case 'ncoits':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-ncoits.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
        break;

      case 'ncosbm':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-ncosbm.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
        break;

      case 'ncoshr':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-ncoshr.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
        break;

      case 'ncdmva':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-dmva.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
        break;

      case 'ncdma':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-ncdma.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
        break;

      case 'nchiea':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-nchiea.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
        break;

      case 'ltgov':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-ltgovernor.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
        break;

      case 'qar':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-ncdcr-qar.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
        break;

      case 'nhp':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-ncdcr-nhp.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
        break;

      case 'osa':
// @Deprecated:          drupal_add_css($theme_path . '/css/style-ncdcr-osa.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
        break;

      default:
// @Deprecated:          drupal_add_css($theme_path . '/css/style.css', array(
            'group' => CSS_THEME,
            'weight' => 1,
            'type' => 'file',
          )
        );
    }
  endif;

  if (!empty($variables['page']['footer_firstcolumn'])
    || !empty($variables['page']['footer_secondcolumn'])
    || !empty($variables['page']['footer_thirdcolumn'])
    || !empty($variables['page']['footer_fourthcolumn'])) {
    $variables['classes_array'][] = 'footer-columns';
  }

  $variables['classes_array'][] = theme_get_setting('enterprise_header_theme')
    ? theme_get_setting('enterprise_header_theme') : 'enterprise-core-dark';
}

/**
 * Implements nc_eight_theme_process_html function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_process_html(&$variables) {
}

/**
 * Implements nc_eight_theme_process_page function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_process_page(&$variables) {
  $type = isset($variables['node']) ? $variables['node']->type : FALSE;
  // Init primary content attributes array.
  $variables['primary_content_attributes'] = array();
  // Init Page Title Width toggle.
  $variables['full_width_page_title'] = FALSE;
  if (!empty($variables['node']) && node_is_page($variables['node']) === TRUE) {
    // Get the Language set for node.
    $langcode_current = entity_language('node', $variables['node']);
   // Set the page title to go full-width depending on node type.
    if ($variables['node']->type == 'profile' || $variables['node']->type == 'event') {
      $variables['full_width_page_title'] = TRUE;
    }
  }
  // Render the navigation from nc_menus.
// @Deprecated:    $variables['navigation'] = theme('navigation__nc_menus');
// @Deprecated:    $variables['network_nav'] = theme('network__nc_menus');
  // Always print the site name and slogan, but if they are toggled off, we'll
  // just hide them visually.
  $variables['hide_site_name']   = theme_get_setting('toggle_name') ? FALSE : TRUE;
  $variables['hide_site_slogan'] = theme_get_setting('toggle_slogan') ? FALSE : TRUE;
  if ($variables['hide_site_name']) {
    // If toggle_name is FALSE, the site_name will be empty, so we rebuild it.
// @Deprecated:      $variables['site_name'] = filter_xss_admin(variable_get('site_name', 'Drupal'));
  }
  if ($variables['hide_site_slogan']) {
    // If toggle_site_slogan is FALSE, the site_slogan will be empty, so we
    // rebuild it.
// @Deprecated:      $variables['site_slogan'] = filter_xss_admin(variable_get('site_slogan', ''));
  }
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = array(
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    );
    $variables['title_suffix']['shortcut_wrapper'] = array(
      '#markup' => '</div>',
      '#weight' => -99,
    );
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }
  // Customize page title for profile node pages.
  if (!empty($variables['node']) && !empty($variables['node']->type) && $variables['node']->type == "profile") {
    // Node template is responsible for printing the title on profile nodes.
    $variables['title'] = NULL;
  }

  // Give the Title of the page a default class.
  $variables['title_attributes_array']['class'][] = 'page-title';

  // Move landing page content outside of main content div. NO NO NO!
  $variables['page_landing_page'] = FALSE;
  if (!empty($variables['node']) && node_is_page($variables['node']) === TRUE && $variables['node']->type == "landing_page") {
    $variables['page_landing_page'] = TRUE;
    $variables['title_prefix']['landing'] = array(
      '#markup' => '<div class="wrapper">',
      '#weight' => 100,
    );
  }

  // Determine the main content wrapper class. This class sets the overall
  // expectation of columns to follow.
  $variables['main_wrapper_classes'] = '';

  if ($variables['page_landing_page'] == FALSE) {
    $variables['main_wrapper_classes'] = 'wrapper group';
    if (($variables['page']['sidebar_first'] && $variables['page']['sidebar_second']) && $variables['page']['content']) {
      $variables['main_wrapper_classes'] .= ' article-2-sidebars blocks-one-third';
    }
    elseif (($variables['page']['sidebar_first'] || $variables['page']['sidebar_second']) && $variables['page']['content']) {
      $variables['main_wrapper_classes'] .= ' article-sidebar blocks-two-third';

      if ($type && $type == 'press_release') {
        $variables['primary_content_attributes']['class'] = 'post column';
      }
      else {
        $variables['primary_content_attributes']['class'][] = 'article column';
      }
    }
  }

  // Create the 'back-to-top' markup.
  $variables['back_to_top'] = array(
    '#prefix' => '<a id="back-to-top" class="back-to-top" href="#content-container" title="' . t('Back to top') . '">',
    '#suffix' => '</a>',
    'button' => array(
      '#prefix' => '<span class="icon-vertical-align-top" aria-hidden="true"></span>',
      '#suffix' => '<span class="visuallyhidden">' . t('Back to top') . '</span>',
    ),
  );
  // Footer columns
  $footer_column_count = 0;
  if (!empty($variables['page']['footer_firstcolumn'])) {
    $footer_column_count++;
  }
  if (!empty($variables['page']['footer_secondcolumn'])) {
    $footer_column_count++;
  }
  if (!empty($variables['page']['footer_thirdcolumn'])) {
    $footer_column_count++;
  }
  if (!empty($variables['page']['footer_fourthcolumn'])) {
    $footer_column_count++;
  }
  $variables['footer_column_class'] = "";
  switch ($footer_column_count) {
    case 2:
      $variables['footer_column_class'] = 'parts-span-half';
      break;
    case 3:
      $variables['footer_column_class'] = 'parts-span-third';
      break;
    case 4:
      $variables['footer_column_class'] = 'parts-span-fourth';
      break;
    default:
      $variables['footer_column_class'] = "";
  }

  // Load the jQuery UI Autocomplete widget.
// @Deprecated:    drupal_add_library('system', 'ui.autocomplete');

  // ABT-789: Add user's roles to user page title
  if (in_array('page__user', $variables['theme_hook_suggestions'])) {
    if (isset($variables['page']['content']['system_main']['#account'])) {
      foreach ($variables['page']['content']['system_main']['#account']->roles as $role) {
        if ($role !== 'authenticated user') {
          $user_roles[] = $role;
        }
      }
    }
    if (!empty($user_roles)) {
      $variables['title'] = $variables['title'] . ' (' . implode(', ', $user_roles) . ')';
    }
  }
}

/**
 * Implements nc_eight_theme_preprocess_maintenance_page function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }
// @Deprecated:    drupal_add_css(drupal_get_path('theme', 'nc_eight_theme') . '/css/maintenance-page.css');
}

/**
 * Implements nc_eight_theme_process_maintenance_page function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_process_maintenance_page(&$variables) {
  // Always print the site name and slogan, but if they are toggled off, we'll
  // just hide them visually.
  $variables['hide_site_name']   = theme_get_setting('toggle_name') ? FALSE : TRUE;
  $variables['hide_site_slogan'] = theme_get_setting('toggle_slogan') ? FALSE : TRUE;
  if ($variables['hide_site_name']) {
    // If toggle_name is FALSE, the site_name will be empty, so we rebuild it.
// @Deprecated:      $variables['site_name'] = filter_xss_admin(variable_get('site_name', 'Drupal'));
  }
  if ($variables['hide_site_slogan']) {
    // If toggle_site_slogan is FALSE, the site_slogan will be empty, so we
    // rebuild it.
// @Deprecated:      $variables['site_slogan'] = filter_xss_admin(variable_get('site_slogan', ''));
  }
}

/**
 * Implements nc_eight_theme_preprocess_node function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_preprocess_node(&$variables, $hook) {
  if ($variables['view_mode'] == 'full' && node_is_page($variables['node'])) {
    $variables['classes_array'][] = 'node-full';
  }
  if (($variables['view_mode'] == 'teaser') && $variables['node']->type == 'document' || $variables['node']->type == 'press_release') {
    $variables['title_attributes_array']['itemprop'][] = 'name';
    // Build the teaser specific values we are expecting in the teaser tpl.
    $variables['teaser_label'] = '';
    $variables['teaser_summary'] = '';
    if (!empty($variables['content']['field_agency_department']) && isset($variables['content']['field_agency_department'][0])) {
      $variables['teaser_label'] = $variables['content']['field_agency_department'][0];
    }
    if (!empty($variables['content']['body']) && isset($variables['content']['body'][0])) {
      $variables['teaser_summary'] = $variables['content']['body'][0];
    }
    if (!empty($variables['content']['field_release_date']) && isset($variables['content']['field_release_date'][0])) {
      $variables['teaser_date'] = $variables['content']['field_release_date'][0];
    }
  }

  // Allow templates per type and view mode.
  $variables['theme_hook_suggestions'][] = 'node__' . $variables['type'] . '__' . $variables['view_mode'];

  // Specify preprocess function of [theme_name]_[content_type]_[view_mode].
  $view_mode_preprocess = 'nc_eight_theme_preprocess_node_' . $variables['type'] . '_' . $variables['view_mode'];
  if (function_exists($view_mode_preprocess)) {
    $view_mode_preprocess($variables, $hook);
  }
}

/**
 * Implements nc_eight_theme_preprocess_block function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_preprocess_block(&$variables) {
  $block_id = $variables['block']->module . '-' . $variables['block']->delta;
  // In the header region visually hide block titles.
  if ($variables['block']->region == 'header') {
    $variables['title_attributes_array']['class'][] = 'element-invisible';
  }
  if ($block_id == 'follow-site') {
    $variables['classes_array'][] = 'social-links';
  }
}

/**
 * Implements nc_eight_theme_preprocess_select function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_preprocess_select(&$variables) {
  // We don't want this to load on the admin side.
  // The select.js script prevents the Paragraphs edit button
  // from working in some cases due to Javascript erorrs.
  // The errors occur because the script isn't designed to
  // work on the admin side of Drupal.
  if (path_is_admin(current_path())) {
    return;
  }

  // Load SelectBoxIt library, which requires jQuery UI Widget.
// @Deprecated:    drupal_add_library('system', 'ui.widget');
// @Deprecated:    drupal_add_js(libraries_get_path('selectboxit') . '/src/javascripts/jquery.selectBoxIt.js', array('scope' => 'footer'));
// @Deprecated:    drupal_add_js(drupal_get_path('theme', 'nc_eight_theme') . '/js/select.js');
// @Deprecated:    drupal_add_css(drupal_get_path('theme', 'nc_eight_theme') . '/css/select.css', array('type' => 'file'));
  if ($variables['element']['#name'] == 'lang_dropdown_select') {
    $variables['element']['#attributes']['data-icon'][] = 'icon-language';
  }
}

/**
 * Implements nc_eight_theme_preprocess_button function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_preprocess_button(&$variables) {
  $variables['element']['#attributes']['class'][] = 'button';
}

/**
 * Implements nc_eight_theme_block_view_follow_site_alter function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_block_view_follow_site_alter(&$data, $block) {
  if (!empty($data) && isset($data['content'])) {
    $element = array();
    $links = follow_links_load(0);
    $networks = follow_networks_load(0);
    if (!empty($links)) {
// @Deprecated:        $data['content'] = theme('follow_links', array('links' => $links, 'networks' => $networks));
    }
  }
}

/**
 * Implements nc_eight_theme_query_preferred_menu_links_alter function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_query_preferred_menu_links_alter($query) {
  // Because of the way that Drupal handles menu links by default,
  // the lowest mlid is always going to be the the one that
  // is setup in the menu settings for the node.
  $query->orderBy('mlid', 'DESC');
}

/**
 * Implements nc_eight_theme_preprocess_region function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_preprocess_region(&$variables) {
  if ($variables['region'] == "footer_firstcolumn" || $variables['region']  == "footer_secondcolumn" || $variables['region'] == "footer_thirdcolumn" || $variables['region'] == "footer_fourthcolumn") {
    $variables['theme_hook_suggestions'][] = 'region__footer_column';
  }
}

/**
 * Implements nc_eight_theme_element_info_alter function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_element_info_alter(&$type) {
  // Remove the month and year select boxes from the datepicker.
  if (!empty($type['date_popup'])) {
    $type['date_popup']['#datepicker_options']['changeMonth'] = FALSE;
    $type['date_popup']['#datepicker_options']['changeYear'] = FALSE;
  }
}

/**
 * Implements nc_eight_theme_preprocess_node_site_page_basic_card function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_preprocess_node_site_page_basic_card(&$variables) {
  if (!module_exists('nc_cards')) {
    return;
  }
  // Process our Card variables to pass along to the node template. The node
  // template is responsible for either rendering the node content as-is, or
  // if card content exists, render that instead.

  // Site Page nodes can be rendered as an Article Card using the below fields,
  // which we expect to be available in $variables['content'].

  // Site Page nodes to Article Cards use the following field mappings:
  // node title = $card_title
  // node body = $card_description
  // node url = $card_link
  // field_main_image = $card_image
  // node created date = $card_date
  // * - not defined = $card_framed
  // * - not defined = $card_keywords

  $wrapper = entity_metadata_wrapper('node', $variables['node']);

  if (isset($variables['content']['field_main_image'])) {
    $image = $wrapper->field_main_image->value();
    $variables['card']['card_image'] = array(
      '#theme' => 'image_formatter',
      '#item' => $image,
      '#image_style' => 'card_photo',
    );
  }
  $variables['card']['card_title'] = $variables['node']->title;
  $variables['card']['card_link'] = $variables['node_url'];
  $variables['card']['card_date'] = date('M j, Y', $variables['created']);
  if (!empty($variables['body'])) {
    $variables['card']['card_description'] = $wrapper->body->summary->value(array('sanitized' => TRUE));
  }
// @Deprecated:    $variables['card']['content'] = theme('nc_card_article', $variables['card']);
}

/**
 * Implements nc_eight_theme_preprocess_node_press_release_basic_card function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_preprocess_node_press_release_basic_card(&$variables) {
  if (!module_exists('nc_cards')) {
    return;
  }
  // Process our Card variables to pass along to the node template. The node
  // template is responsible for either rendering the node content as-is, or
  // if card content exists, render that instead.

  // Press Release nodes can be rendered as an Article Card using the below
  // fields, which we expect to be available in $variables['content'].
  // node title = $card_title
  // node url = $card_link
  // node body = $card_description
  // field_main_image = $card_image
  // field_release_date = $card_date
  // * - not defined = $card_framed
  // field_press_release_terms = $card_keywords

  $wrapper = entity_metadata_wrapper('node', $variables['node']);

  // card_title.
  $variables['card']['card_title'] = $variables['node']->title;
  // card_description.
  $variables['card']['card_description'] = $wrapper->body->summary->value(array('sanitized' => TRUE));
  // card_link.
  $variables['card']['card_link'] = $variables['node_url'];
  // card_image.
  if (isset($variables['content']['field_main_image'])) {
    $image = $wrapper->field_main_image->value();
    $variables['card']['card_image'] = array(
      '#theme' => 'image_formatter',
      '#item' => $image,
      '#image_style' => 'card_photo',
    );
  }
  // card_date.
  if (isset($variables['content']['field_release_date'])) {
    $variables['card']['card_date'] = date('M j, Y', $wrapper->field_release_date->value(array('sanitized' => TRUE)));
  }
  // card_keywords
  if (isset($variables['content']['field_press_release_terms'])) {
    $keywords = $wrapper->field_press_release_terms->value(array('sanitized' => TRUE));
    // Guard against 1 result.
    if (!is_object($keywords)) {
      foreach ($keywords as $keyword) {
// @Deprecated:          $keyword_array[] = check_plain($keyword->name);
      }
      $variables['card']['card_keywords'] = implode(', ', $keyword_array);
    }
    else {
// @Deprecated:        $variables['card']['card_keywords'] = check_plain($keywords->name);
    }
  }
// @Deprecated:    $variables['card']['content'] = theme('nc_card_article', $variables['card']);
}

/**
 * Implements nc_eight_theme_preprocess_node_blog_entry_basic_card function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_preprocess_node_blog_entry_basic_card(&$variables) {
  if (!module_exists('nc_cards')) {
    return;
  }
  // Process our Card variables to pass along to the node template. The node
  // template is responsible for either rendering the node content as-is, or
  // if card content exists, render that instead.

  // Blog Entry nodes can be rendered as an Article Card using the below
  // fields, which we expect to be available in $variables['content'].
  // node title = $card_title
  // node url = $card_link
  // node body = $card_description
  // field_main_image = $card_image
  // field_release_date = $card_date
  // * - not defined = $card_framed
  // * - not defined = $card_keywords

  $wrapper = entity_metadata_wrapper('node', $variables['node']);

  // card_title.
  $variables['card']['card_title'] = $variables['node']->title;
  // card_description.
  $variables['card']['card_description'] = $wrapper->body->summary->value(array('sanitized' => TRUE));
  // card_link.
  $variables['card']['card_link'] = $variables['node_url'];
  // card_image.
  if (isset($variables['content']['field_main_image'])) {
    $image = $wrapper->field_main_image->value();
    $variables['card']['card_image'] = array(
      '#theme' => 'image_formatter',
      '#item' => $image,
      '#image_style' => 'card_photo',
    );
  }
  // card_date.
  if (isset($variables['content']['field_release_date'])) {
    $variables['card']['card_date'] = date('M j, Y', $variables['created']);
  }
// @Deprecated:    $variables['card']['content'] = theme('nc_card_article', $variables['card']);
}

/**
 * Implements nc_eight_theme_preprocess_node_services_basic_card function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_preprocess_node_services_basic_card(&$variables) {
  if (!module_exists('nc_cards')) {
    return;
  }
  // Process our Card variables to pass along to the node template. The node
  // template is responsible for either rendering the node content as-is, or
  // if card content exists, render that instead.

  // Services nodes can be rendered as a Person Card using the below
  // fields, which we expect to be available in $variables['content'].
  // node title = $card_name
  // field_profile_job_title = $card_title
  // node url = $card_link
  // field_main_image = $card_image

  $wrapper = entity_metadata_wrapper('node', $variables['node']);

  // card_name.
  $variables['card']['card_title'] = ($variables['node']->title);
  // card_link.
  $variables['card']['card_link'] = $variables['node_url'];
  // card_image.
  if (isset($variables['content']['field_services_photo'])) {
    $image = $wrapper->field_services_photo->value();
    $variables['card']['card_image'] = array(
      '#theme' => 'image_formatter',
      '#item' => $image,
      '#image_style' => 'card_photo',
    );
  }
// @Deprecated:    $variables['card']['content'] = theme('nc_card_article', $variables['card']);
}

/**
 * Implements nc_eight_theme_preprocess_node_event_basic_card function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_preprocess_node_event_basic_card(&$variables) {
  if (!module_exists('nc_cards')) {
    return;
  }
  // Process our Card variables to pass along to the node template. The node
  // template is responsible for either rendering the node content as-is, or
  // if card content exists, render that instead.

  // Event nodes can be rendered as an Article Card using the below
  // fields, which we expect to be available in $variables['content'].
  // node title = $card_title
  // node url = $card_link
  // field_main_image = $card_image
  // field_event_dates = $card_datetime
  // field_event_dates = $card_date_day
  // field_event_dates = $card_date_month
  // field_event_location = $card_address_locality
  // field_event_location = $card_address_region
  // field_event_type = $card_event_type

  $wrapper = entity_metadata_wrapper('node', $variables['node']);

  // card_title.
  $variables['card']['card_title'] = $variables['node']->title;
  // card_link.
  $variables['card']['card_link'] = $variables['node_url'];
  // card_image.
  if (isset($variables['content']['field_main_image'])) {
    $image = $wrapper->field_main_image->value();
    $variables['card']['card_image'] = array(
      '#theme' => 'image_formatter',
      '#item' => $image,
      '#image_style' => 'card_photo',
    );
  }
  // Card dates.
  if (isset($variables['content']['field_event_dates'])) {
    $date = $wrapper->field_event_dates->value->value(array('sanitized' => TRUE));
    $variables['card']['card_datetime'] = date('c', $date);
    $variables['card']['card_date_day'] = date('j', $date);
    $variables['card']['card_date_month'] = date('F', $date);
  }
  // Card location.
  if (isset($variables['content']['field_event_location'])) {
    $address = $wrapper->field_event_location->value(array('sanitized' => TRUE));
    $variables['card']['card_address_region'] = $address['administrative_area'];
    $variables['card']['card_address_locality'] = $address['locality'];
  }
  // card_event_type
  if (isset($variables['content']['field_event_type'])) {
    $keywords = $wrapper->field_event_type->value(array('sanitized' => TRUE));
    // Guard against 1 result.
    if (!is_object($keywords)) {
      foreach ($keywords as $keyword) {
// @Deprecated:          $keyword_array[] = check_plain($keyword->name);
      }
      $variables['card']['card_event_type'] = implode(', ', $keyword_array);
    }
    else {
// @Deprecated:        $variables['card']['card_event_type'] = check_plain($keywords->name);
    }
  }
// @Deprecated:    $variables['card']['content'] = theme('nc_card_event', $variables['card']);
}

/**
 * Implements nc_eight_theme_preprocess_node_profile_basic_card function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_preprocess_node_profile_basic_card(&$variables) {
  if (!module_exists('nc_cards')) {
    return;
  }
  // Process our Card variables to pass along to the node template. The node
  // template is responsible for either rendering the node content as-is, or
  // if card content exists, render that instead.

  // Event nodes can be rendered as a Person Card using the below
  // fields, which we expect to be available in $variables['content'].
  // node title = $card_name
  // field_profile_job_title = $card_title
  // node url = $card_link
  // field_main_image = $card_image

  $wrapper = entity_metadata_wrapper('node', $variables['node']);

  // card_name.
  $variables['card']['card_name'] = ($variables['node']->title);
  // card_link.
  $variables['card']['card_link'] = $variables['node_url'];
  // card_image.
  if (isset($variables['content']['field_profile_photo'])) {
    $image = $wrapper->field_profile_photo->value();
    $variables['card']['card_image'] = array(
      '#theme' => 'image_formatter',
      '#item' => $image,
      '#image_style' => 'card_photo',
    );
  }
  // card_title
  if (isset($variables['content']['field_profile_job_title'])) {
    $variables['card']['card_title'] = $wrapper->field_profile_job_title->value(array('sanitized' => TRUE));
  }
// @Deprecated:    $variables['card']['content'] = theme('nc_card_person', $variables['card']);
}

/**
 * Implements nc_eight_theme_preprocess_node_agency_basic_card function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_preprocess_node_agency_basic_card(&$variables) {
  if (!module_exists('nc_cards')) {
    return;
  }
  // Process our Card variables to pass along to the node template. The node
  // template is responsible for either rendering the node content as-is, or
  // if card content exists, render that instead.

  // Event nodes can be rendered as a Agency Card using the below
  // fields, which we expect to be available in $variables['content'].
  //
  // node url = $card_link
  // node title = $card_title
  // field_agency_category = $card_keywords
  // field_agency_card_description = $card_description
  // field_agency_card_link = $card_link_website
  // field_agency_card_link = $card_link_website_title
  // field_agency_social_links = $social_links

  $wrapper = entity_metadata_wrapper('node', $variables['node']);
  if (!user_is_anonymous()) {
    $variables['agency_card']['edit_link'] = l('Edit', 'node/' . $variables['node']->nid . '/edit');
  }
  // card_title.
  $variables['agency_card']['card_title'] = $variables['node']->title;
  // card_link.
  $variables['agency_card']['card_link'] = ($wrapper->field_top_level_agency->value()) ? $variables['node_url'] : '';
  $phone_info = $wrapper->field_agency_phone->info(array('serialize' => TRUE));
// @Deprecated:    $variables['agency_card']['phone'] = check_plain($phone_info['label'] . ': ' . $wrapper->field_agency_phone->value());
  // card_link_website & card_link_website_title.
  $link = $wrapper->field_agency_card_link->value(array('sanitized' => TRUE));
  $variables['agency_card']['card_link_website'] = $link['url'];
  $variables['agency_card']['card_link_website_title'] = $link['title'];
  // Social links.
  $social_links = $wrapper->field_agency_social_links->value(array('serialize' => TRUE));
  $links = array();
  foreach ($social_links as $social_link) {
// @Deprecated:      $icon_text = "icon-" . check_plain(strtolower($social_link['title']));
    $icons = nc_agency_icon_classes();
    if (array_key_exists($icon_text, $icons)) {
      $icon_class = $icons[$icon_text];
    }
    else {
      $icon_class = 'icon-share';
    }
    $options = array(
      'class' => $icon_class,
      'aria-hidden' => 'true',
    );
    $attributes = drupal_attributes($options);
    $links[] = array(
      '#prefix' => "<li><a href='{$social_link['url']}'>",
      '#suffix' => '</a></li>',
      'icon' => array(
        '#markup' => "<span {$attributes}></span><span>{$social_link['title']}</span>",
      ),
    );
  }
  if (($links)) {
    $variables['agency_card']['social_links'] = array(
      '#prefix' => '<ul>',
      '#suffix' => '</ul>',
      'links' => $links,
    );
  }
  // Keywords.
  if (isset($variables['content']['field_agency_category'])) {
    $keywords = $wrapper->field_agency_category->value(array('sanitized' => TRUE));
    // Guard against 1 result.
    if (!is_object($keywords)) {
      foreach ($keywords as $keyword) {
// @Deprecated:          $keyword_array[] = check_plain($keyword->name);
      }
      $variables['agency_card']['card_keywords'] = implode(', ', $keyword_array);
    }
    else {
// @Deprecated:        $variables['agency_card']['card_keywords'] = check_plain($keywords->name);
    }
  }
  $variables['agency_card']['card_description'] = $wrapper->field_agency_card_description->value(array('sanitized' => TRUE));
// @Deprecated:    $variables['agency_card']['content'] = theme('nc_card_agency', $variables['agency_card']);
}

/**
 * Implements nc_eight_theme_preprocess_views_exposed_form function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_preprocess_views_exposed_form(&$vars, $hook) {

  // ABT#614 - Services page modifications.
  if ($vars['form']['#id'] == 'views-exposed-form-services-list-page-1') {

    // Modify reset button markup (add inverted & ghost classes).
    if (isset($vars['form']['reset'])) {
      if (!isset($vars['form']['reset']['#attributes'])) {
        $vars['form']['reset']['#attributes'] = array();
      }

      if (!isset($vars['form']['reset']['#attributes']['class'])) {
        $vars['form']['reset']['#attributes']['class'] = array();
      }

      $vars['form']['reset']['#attributes']['class'] =
        array_merge(
          $vars['form']['reset']['#attributes']['class'],
          array('ghost', 'inverted')
        );

      unset($vars['form']['reset']['#printed']);
      $vars['reset_button'] = drupal_render($vars['form']['reset']);
    }

    // Modify submit button markup (add inverted & ghost classes).
    if (isset($vars['form']['submit'])) {
      if (!isset($vars['form']['submit']['#attributes'])) {
        $vars['form']['submit']['#attributes'] = array();
      }

      if (!isset($vars['form']['submit']['#attributes']['class'])) {
        $vars['form']['submit']['#attributes']['class'] = array();
      }

      $vars['form']['submit']['#attributes']['class'] =
        array_merge(
          $vars['form']['submit']['#attributes']['class'],
          array('accent')
        );

      // Rebuild the rendered version (submit button, rest remains unchanged)
      unset($vars['form']['submit']['#printed']);
      $vars['button'] = drupal_render($vars['form']['submit']);
    }
  }
}

/**
 * Implements _nc_eight_theme_get_translation_links function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function _nc_eight_theme_get_translation_links(array &$links, $remove_translation = TRUE) {
  $html = '';
  if (isset($links['translation'])) {
    $html = '<div class="link-wrapper translation-links">' . render($links['translation']) . '</div>';
    if ($remove_translate) {
      unset($links['translation']);
    }
  }
  return $html;
}

/**
 * Implements nc_eight_theme_preprocess_navigation function.
 *
 * @param array <<any params>>
 *   <<describe the params and what they do here>>
 */
function nc_eight_theme_preprocess_navigation(&$variables) {
  $icon_path = theme_get_setting('logo_svg_path');
  if (!$icon_path) {
    $icon_path = theme_get_setting('logo_path');
  }
  $variables['logo'] = $icon_path ? file_create_url($icon_path) : false;
}

/**
 * Prepares variables for [description of status_messages] templates.
 *
 * Default template: status-messages.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - nc_eight_theme_status_messages: the markup outputted by the original nc_base_theme_status_messages theme function.
 */
function nc_eight_theme_status_messages(&$Array) {
  $display = $variables['display'];
  $output = '';

  $status_heading = array(
    'status' => t('Status message'),
    'error' => t('Error message'),
    'warning' => t('Warning message'),
  );
  foreach (drupal_get_messages($display) as $type => $messages) {
    $output .= "<span class=\"message-wrapper $type\"><div class=\"wrapper\"><div class=\"messages $type\">\n";
    if (!empty($status_heading[$type])) {
      $output .= '<h2 class="element-invisible">' . $status_heading[$type] . "</h2>\n";
    }
    if (count($messages) > 1) {
      $output .= " <ul>\n";
      foreach ($messages as $message) {
        $output .= '  <li>' . $message . "</li>\n";
      }
      $output .= " </ul>\n";
    }
    else {
      $output .= $messages[0];
    }
    $output .= "</div></div></span>\n";
  }
  $Array['nc_eight_theme_status_messages'] = $output;
}
/**
 * The following could probably be moved to status-messages.html.twig:
 *   3 call(s) to t(); can also use t as a filter in Twig
 *   approximately 15 strings of markup
 */

/**
 * Prepares variables for [description of breadcrumb] templates.
 *
 * Default template: breadcrumb.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - nc_eight_theme_breadcrumb: the markup outputted by the original nc_base_theme_breadcrumb theme function.
 */
function nc_eight_theme_breadcrumb(&$Array) {
  $breadcrumb = $variables['breadcrumb'];

  if (!empty($breadcrumb)) {
    $crumbs = array(
      '#prefix' => '<div class="breadcrumbs">',
      '#suffix' => '</div>',
    );
    $a = 1;
    $crumbs['wrapper'] = array();
    foreach ($breadcrumb as $index => $value) {
      $title = new SimpleXMLElement($value);
      $crumb_text = strip_tags($value);
      if ($a == 1) {
// @Deprecated:          if ($crumb_text == 'Home' && variable_get('site_home_breadcrumb')) {
// @Deprecated:            $crumb_text = check_plain(variable_get('site_home_breadcrumb'));
        }
        $crumbs['wrapper']['#prefix'] = '<div class="wrapper" itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="' . $title['href'] . '" itemprop="url" title="' . $crumb_text . '"><span itemprop="title">' . $crumb_text . '</span></a>  &#x000BB; ';
        $crumbs['wrapper']['#suffix'] = '</div>';
      }
      else {
        $crumbs['wrapper'][$index] = array(
          '#prefix' => '<div itemprop="child" itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="' . $title['href'] . '" itemprop="url" title="' . $crumb_text . '"><span itemprop="title">' . $crumb_text . '</span></a>  &#x000BB; ',
          '#suffix' => '</div>',
        );
      }
      $a++;
    }
    if (drupal_get_title() !== '') {
      $crumbs['wrapper'][] = array(
        '#prefix' => '<div itemprop="child" itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><span itemprop="title">' . drupal_get_title() . '</span>',
        '#suffix' => '</div>',
      );
    }
    $crumbs['wrapper']['button'] = array(
      '#markup' => '<button data-toggle="breadcrumbs icon-add" aria-hidden="true"><span class="visuallyhidden">Expand</span></button>',
    );
    $Array['nc_eight_theme_breadcrumb'] = render($crumbs);
  }
/**
 * The following could probably be moved to breadcrumb.html.twig:
 *   approximately 36 strings of markup
 */

/**
 * Prepares variables for [description of pager] templates.
 *
 * Default template: pager.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - nc_eight_theme_pager: the markup outputted by the original nc_base_theme_pager theme function.
 */
function nc_eight_theme_pager(&$Array) {
  $tags = $variables['tags'];
  $element = $variables['element'];
  $parameters = $variables['parameters'];
  $quantity = $variables['quantity'];
  global $pager_page_array, $pager_total;

  // Calculate various markers within this pager piece:
  // Middle is used to "center" pages around the current page.
  $pager_middle = ceil($quantity / 2);
  // current is the page we are currently paged to
  $pager_current = $pager_page_array[$element] + 1;
  // first is the first page listed by this pager piece (re quantity)
  $pager_first = $pager_current - $pager_middle + 1;
  // last is the last page listed by this pager piece (re quantity)
  $pager_last = $pager_current + $quantity - $pager_middle;
  // max is the maximum page number
  $pager_max = $pager_total[$element];
  // End of marker calculations.

  // Prepare for generation loop.
  $i = $pager_first;
  if ($pager_last > $pager_max) {
    // Adjust "center" if at end of query.
    $i = $i + ($pager_max - $pager_last);
    $pager_last = $pager_max;
  }
  if ($i <= 0) {
    // Adjust "center" if at start of query.
    $pager_last = $pager_last + (1 - $i);
    $i = 1;
  }
  // End of generation loop preparation.
// @Deprecated:    $li_previous = theme('pager_previous', array('text' => (isset($tags[1]) ? $tags[1] : t('Back')), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));
// @Deprecated:    $li_next = theme('pager_next', array('text' => (isset($tags[3]) ? $tags[3] : t('Next')), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));

  if ($pager_total[$element] > 1) {
    if ($li_previous) {
      $items[] = array(
        'class' => array('pager-previous'),
        'data' => format_pager('prev', $li_previous),
      );
    }
    else {
      $items[] = array(
        'class' => array('disabled'),
        'data' => '<span class="icon-chevron-left" aria-hidden="true"></span><span>' . t('Back') . '</span>',
      );
    }

    // When there is more than one page, create the pager list.
    if ($i != $pager_max) {
      if ($i > 1) {
        $items[] = array(
          'class' => array('pager-ellipsis'),
          'data' => '…',
        );
      }
      // Now generate the actual pager piece.
      for (; $i <= $pager_last && $i <= $pager_max; $i++) {
        if ($i < $pager_current) {
          $items[] = array(
            'class' => array('pager-item'),
// @Deprecated:              'data' => theme('pager_previous', array('text' => $i, 'element' => $element, 'interval' => ($pager_current - $i), 'parameters' => $parameters)),
          );
        }
        if ($i == $pager_current) {
          $items[] = array(
            'class' => array('pager-current active'),
            'data' => '<a href="#">' . $i . '<span class="visuallyhidden"> (current)</span></a>',
          );
        }
        if ($i > $pager_current) {
          $items[] = array(
            'class' => array('pager-item'),
// @Deprecated:              'data' => theme('pager_next', array('text' => $i, 'element' => $element, 'interval' => ($i - $pager_current), 'parameters' => $parameters)),
          );
        }
      }
      if ($i < $pager_max) {
        $items[] = array(
          'class' => array('pager-ellipsis'),
          'data' => '…',
        );
      }
    }
    // End generation.
    if ($li_next) {
      $items[] = array(
        'class' => array('pager-next'),
        'data' => format_pager('next', $li_next),
      );
    }
    else {
      $items[] = array(
        'class' => array('disabled'),
        'data' => '<span>' . t('Next') . '</span><span class="icon-chevron-right" aria-hidden="true"></span>',
      );
    }
// @Deprecated:      return '<nav class="pagination numeric-pagination">' . theme('item_list', array(
      'items' => $items,
      'type' => 'ol',
      'attributes' => array('class' => array('pager')),
    )) . '</nav>';
  }
}
/**
 * The following could probably be moved to pager.html.twig:
 *   2 call(s) to t(); can also use t as a filter in Twig
 *   approximately 48 strings of markup
 */

/**
 * Prepares variables for [description of menu_tree] templates.
 *
 * Default template: menu-tree.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - nc_eight_theme_menu_tree: the markup outputted by the original nc_base_theme_menu_tree theme function.
 */
function nc_eight_theme_menu_tree(&$Array) {
  $Array['nc_eight_theme_menu_tree'] = '<ul class="menu clearfix">' . $variables['tree'] . '</ul>';
}
/**
 * The following could probably be moved to menu-tree.html.twig:
 *   approximately 3 strings of markup
 */

/**
 * Prepares variables for [description of form] templates.
 *
 * Default template: form.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - nc_eight_theme_form: the markup outputted by the original nc_base_theme_form theme function.
 */
function nc_eight_theme_form(&$Array) {
  $element = $variables['element'];
  if (isset($element['#action'])) {
    $element['#attributes']['action'] = drupal_strip_dangerous_protocols($element['#action']);
  }
  element_set_attributes($element, array('method', 'id'));
  if (empty($element['#attributes']['accept-charset'])) {
    $element['#attributes']['accept-charset'] = "UTF-8";
  }
  $Array['nc_eight_theme_form'] = '<form' . drupal_attributes($element['#attributes']) . '>' . $element['#children'] . '</form>';
}
/**
 * The following could probably be moved to form.html.twig:
 *   approximately 17 strings of markup
 */

/**
 * Prepares variables for [description of textarea] templates.
 *
 * Default template: textarea.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - nc_eight_theme_textarea: the markup outputted by the original nc_base_theme_textarea theme function.
 */
function nc_eight_theme_textarea(&$Array) 
{
  $element['element']['#resizable'] = false;
  $Array['nc_eight_theme_textarea'] = theme_textarea($element) ;
}
/**
 * The following could probably be moved to textarea.html.twig:
 *   approximately 2 strings of markup
 */

/**
 * Prepares variables for [description of form_element_label] templates.
 *
 * Default template: form-element-label.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - nc_eight_theme_form_element_label: the markup outputted by the original nc_base_theme_form_element_label theme function.
 */
function nc_eight_theme_form_element_label(&$Array) {
  $element = $variables['element'];

  // This is also used in the installer, pre-database setup.
  $t = get_t();

  // If title and required marker are both empty, output no label.
  if ((!isset($element['#title']) || $element['#title'] === '') && empty($element['#required'])) {
    $Array['nc_eight_theme_form_element_label'] = '';
  }

  // If the element is required, a required marker is appended to the label.
// @Deprecated:    $required = !empty($element['#required']) ? theme('form_required_marker', array(
    'element' => $element,
  )) : '';
// @Deprecated:    $title = filter_xss_admin($element['#title']);
  $attributes = array(

  );

  // Style the label as class option to display inline with the element.
  if ($element['#title_display'] == 'after') {
    $attributes['class'] = 'option';
  }
  elseif ($element['#title_display'] == 'invisible') {
    $attributes['class'] = 'element-invisible';
  }
  if (!empty($element['#id'])) {
    $attributes['for'] = $element['#id'];
  }
  if (isset($element['#bold_title']) && $element['#bold_title']) {
    $attributes['style'] = 'font-weight:bold;';
  }
  // The leading whitespace helps visually separate fields from inline labels.
  $Array['nc_eight_theme_form_element_label'] = ' <label' . drupal_attributes($attributes) . '>' . $t('!title !required', array(
      '!title' => $title,
      '!required' => $required,
    )) . "</label>\n";
}
/**
 * The following could probably be moved to form-element-label.html.twig:
 *   approximately 29 strings of markup
 */

/**
 * Prepares variables for [description of follow_links] templates.
 *
 * Default template: follow-links.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - nc_eight_theme_follow_links: the markup outputted by the original nc_base_theme_follow_links theme function.
 */
function nc_eight_theme_follow_links(&$Array) {
  $element = array();
  $items = array();

  foreach ($variables['links'] as $link) {
    $title = !empty($link->title) ? $link->title : $variables['networks'][$link->name]['title'];
// @Deprecated:      $items[] = theme('follow_link', array('title' => $title, 'link' => $link));
  }

  $element['follow-links']['items'] = array(
    '#items' => $items,
    '#theme' => 'item_list',
  );

  $Array['nc_eight_theme_follow_links'] = render($element);
}
/**
 * The following could probably be moved to follow-links.html.twig:
 *   approximately 8 strings of markup
 */

/**
 * Prepares variables for [description of follow_link] templates.
 *
 * Default template: follow-link.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - nc_eight_theme_follow_link: the markup outputted by the original nc_base_theme_follow_link theme function.
 */
function nc_eight_theme_follow_link(&$Array) {
  $link = $variables['link'];
  $title = $variables['title'];
  $link->name = str_replace('this-site', 'feed', $link->name);

  $classes = array();
  $classes[] = 'follow-link';
  $classes[] = "follow-link-{$link->name}
/**
 * The following could probably be moved to follow-link.html.twig:
 *   approximately 5 strings of markup
 */

/**
 * Prepares variables for [description of field__taxonomy_term_reference] templates.
 *
 * Default template: field--taxonomy-term-reference.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - nc_eight_theme_field__taxonomy_term_reference: the markup outputted by the original nc_base_theme_field__taxonomy_term_reference theme function.
 */
function nc_eight_theme_field__taxonomy_term_reference(&$Array) {
  $output = '';

  // Render the label, if it's not hidden.
  if (!$variables['label_hidden']) {
    $output .= '<h3 class="field-label">' . $variables['label'] . ': </h3>';
  }

  // Render the items.
  $output .= ($variables['element']['#label_display'] == 'inline') ? '<ul class="links inline">' : '<ul class="links">';
  foreach ($variables['items'] as $delta => $item) {
    $output .= '<li class="taxonomy-term-reference-' . $delta . '"' . $variables['item_attributes'][$delta] . '>' . drupal_render($item) . '</li>';
  }
  $output .= '</ul>';

  // Render the top-level DIV.
  $output = '<div class="' . $variables['classes'] . (!in_array('clearfix', $variables['classes_array']) ? ' clearfix' : '') . '"' . $variables['attributes'] . '>' . $output . '</div>';

  $Array['nc_eight_theme_field__taxonomy_term_reference'] = $output;
}
/**
 * The following could probably be moved to field--taxonomy-term-reference.html.twig:
 *   1 call(s) to drupal_render()
 *   approximately 27 strings of markup
 */

/**
 * Prepares variables for [description of field__field_organizer__event] templates.
 *
 * Default template: field--field-organizer--event.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - nc_eight_theme_field__field_organizer__event: the markup outputted by the original nc_base_theme_field__field_organizer__event theme function.
 */
function nc_eight_theme_field__field_organizer__event(&$Array) {
  // This is here to negate the effects of
  // nc_base_theme_field__taxonomy_term_reference
  // on the event organizer field.
  $Array['nc_eight_theme_field__field_organizer__event'] = theme_field($variables);
}

/**
 * Prepares variables for [description of field__field_virtual_location__event] templates.
 *
 * Default template: field--field-virtual-location--event.html.twig.
 *
 * @param array $Array
 *   An associative array containing:
 *   - nc_eight_theme_field__field_virtual_location__event: the markup outputted by the original nc_base_theme_field__field_virtual_location__event theme function.
 */
function nc_eight_theme_field__field_virtual_location__event(&$Array) {
  // This is a compromise that may save us from having to
  // go through the trouble of re-implementing the virtual
  // location field as a url/link instead of text.
  $nid = $variables['element']['#object']->nid;
  $node = node_load($nid);
  $wrapper = entity_metadata_wrapper('node', $node);
  $value = $wrapper->field_virtual_location->value();

  if (valid_url($value) || valid_url($value, TRUE)) {
    // Generate normal markup (for text field).
    $markup = theme_field($variables);

    // Get link markup.
    $link = array(
      '#type'    => 'link',
      '#title'   => $value,
      '#href'    => $value,
    );

    $link_markup = render($link);

    // Replace the URL with an anchor
    $Array['nc_eight_theme_field__field_virtual_location__event'] = str_replace($value, $link_markup, $markup);
  }

  // This is here to negate the effects of
  // nc_base_theme_field__taxonomy_term_reference
  // on the event organizer field.
  $Array['nc_eight_theme_field__field_virtual_location__event'] = theme_field($variables);
}
/**
 * The following could probably be moved to field--field-virtual-location--event.html.twig:
 *   approximately 7 strings of markup
 */

