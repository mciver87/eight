<?php
/**
 * @file
 * Code for the NC Press Release feature.
 */

include_once 'nc_press_release.features.inc';

/**
 * Implements hook_preprocess_node().
 */
function nc_press_release_preprocess_node(&$variables) {
  if ($variables['type'] == 'press_release') {
    $variables['classes_array'][] = 'resource';
  }
}

/**
 * Implements hook_views_api().
 */
/*function nc_press_release_views_api() {
  return array(
    'api' => 3,
  );
}*/

/**
 * Implements hook_preprocess_page().
 *
 * Forces Drupal to use our custom page template for press releases.
 */
function nc_press_release_preprocess_page(&$variables, $hook) {
  $type = isset($variables['node']) ? $variables['node']->type : FALSE;
  // The markup required for the press release deviates considerably from
  // what standard Drupal and views markup would/could ever generate.
  // Additionally the node-type templates are not sufficient since we have
  // to customize markup that's generated outside of that template's
  // scope. Therefore, this adds the ability to specify a press release
  // page template.
  if ($type && $type == 'press_release') {
    $variables['theme_hook_suggestions'][] = 'page__type__' . $type;
  }
}

/**
 * Implements hook_field_group_pre_render().
 *
 * Custom renderer for html element. Updates label markup.
 */
function nc_press_release_pre_render_html_element(&$element, $group, &$form) {
  // Call parent function.

  field_group_pre_render_html_element($element, $group, $form);

  // Recompute label info.
  $show_label = isset($group->format_settings['instance_settings']['show_label']) ? $group->format_settings['instance_settings']['show_label'] : 0;
  $label_element = isset($group->format_settings['instance_settings']['label_element']) ? $group->format_settings['instance_settings']['label_element'] : 'div';

  // Replace the old version with the new.
  nc_press_release_pre_render_label($element, $show_label, $label_element);
}

/**
 * Implements hook_field_group_pre_render().
 *
 * Custom renderer for div. Updates label markup.
 */
function nc_press_release_pre_render_div(&$element, $group, &$form) {
  // Call parent function.
  field_group_pre_render_div($element, $group, $form);

  $show_label = isset($group->format_settings['instance_settings']['show_label']) ? $group->format_settings['instance_settings']['show_label'] : 0;
  $label_element = isset($group->format_settings['instance_settings']['label_element']) ? $group->format_settings['instance_settings']['label_element'] : 'h2';

  // Replace the old version with the new.
  nc_press_release_pre_render_label($element, $show_label, $label_element);
}

/**
 * Update the label element with class="section-title".
 *
 * @param array $element
 *   Element.
 * @param bool $show_label
 *   Show Label.
 * @param string $label_element
 *   Label element.
 */
function nc_press_release_pre_render_label(&$element, $show_label, $label_element) {
  // If we're showing the label, replace the old version with the new.
  if ($show_label) {
    $element['#prefix'] = str_replace(
      '<' . $label_element . '>',
      '<' . $label_element . ' class="section-title">',
      $element['#prefix']
    );
  }
}

/**
 * Implements hook_field_group_pre_render().
 *
 * This handles rewriting the rendering of various field_group fields.
 * Due to the way Field Group is implemented, this currently only supports
 * the html element and div field groups. Currently, the only customization
 * in this module is that we're adding a class="section-title" to the label
 * markup for an html element or div.
 */
function nc_press_release_field_group_pre_render(&$element, &$group, & $form) {
  $format_type = $group->format_type;
  $supported_types = array('html-element', 'div');
  $is_right_sidebar = $group->parent_name === 'group_right_sidebar';
  $is_supported = $is_right_sidebar && in_array($format_type, $supported_types);

  // If the element is supported, render it.
  if ($is_supported) {
    field_group_pre_render_prepare($group);
    // Call the pre render function for the format type.
    $function = "nc_press_release_pre_render_" . str_replace("-", "_", $format_type);
    if (function_exists($function)) {
      $function($element, $group, $form);
      // This will prevent field_group from taking over and undoing our changes.
      $group->format_type = 'nc_press_release_' . $format_type;
    }
  }
}

/**
 * Implements hook_preprosess_block().
 *
 * This adds the specified class (from View CSS Class) to the block wrapper.
 * This was added as part of ABT#620. We needed to update the markup to
 * match the styleguide, Markup was drastically different than what Drupal
 * and Views will ever produce, thus we're jumping through hoops here to
 * get things to match up to the styles.
 *
 * Solution adapted from...
 * http://drupal.stackexchange.com/questions/46317/
 * how-to-add-css-classes-to-a-views-generated-block-not-to-its-
 * generated-content.
 */
function nc_press_release_preprocess_block(&$variables) {
  $default_display_id = 'default';
  if (isset($variables['elements']['#views_contextual_links_info']['views_ui'])) {
    $view_ui = $variables['elements']['#views_contextual_links_info']['views_ui'];
    if (isset($view_ui['view_display_id'])) {
      $display_id = $view_ui['view_display_id'];
      if (isset($view_ui['view']) && property_exists($view_ui['view'], 'display') && isset($view_ui['view']->display[$display_id])) {

        $default_css_class = NULL;
        if (isset($view_ui['view']->display[$default_display_id])) {
          $default_display = $view_ui['view']->display[$default_display_id];
          if (property_exists($default_display, 'display_options') && isset($default_display->display_options['css_class'])) {
            $default_css_class = $default_display->display_options['css_class'];
          }
        }

        $view_css_class = NULL;
        $display = $view_ui['view']->display[$display_id];
        if (property_exists($display, 'display_options') && isset($display->display_options['css_class'])) {
          $view_css_class = $display->display_options['css_class'];
        }

        $css_class = $view_css_class ? $view_css_class : $default_css_class;
        if ($css_class) {
          $variables['classes_array'][] = $css_class;
        }
      }
    }
  }
}
